package edu.osu.synergies.simple.model2;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Singleton;
import org.ascape.model.space.Location;
import org.ascape.util.Conditional;

/**
 * <!-- begin-user-doc -->
 * Guide Java Implementation.
 * 
 * Generated by AMF for model: SocialResources.metaabm in project: edu.osu.synergies.ascape 
 * <!-- end-user-doc -->
 * @generated
 */
public class Guide extends CellOccupant {

	/**
	 * <!-- begin-user-doc -->
	 * How effective is this guide at instilling an interest in learning to the learners he or she encounters?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double efficacy = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * A unique identifier for the resource.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int guideID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * How much has this guide contributed to growing learning interest for all learners he or she has encountered?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double contributionTotal = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * The number of learners with whom this guide interacts.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerCount = 0;
	/**
	 * <!-- begin-user-doc -->
	 * Contribution Total divided by Learner Count. This measures the effectiveness of the guide on average given the number of learners he or she is working with.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double contributionPerLearner = 0.0;

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Guide.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Guide() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Guide clone = (Guide) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SocialResources getSocialResources() {
		return (SocialResources) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		List network = new ArrayList();
		network.addAll(((Graph) getSocialResources().getGuideRelationships()
				.getSpace()).getNeighborsFor(this));
		return network;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Color getColor() {
		return Color.LIGHT_GRAY;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		double guideEfficacy = guideEfficacy();

		setEfficacy(guideEfficacy);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Guide Efficacy.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double guideEfficacy() {
		double guideEfficacyMinimum = getSocialResources()
				.getGuideEfficacyMinimum();
		double guideEfficacyMaximum = getSocialResources()
				.getGuideEfficacyMaximum();
		return randomInRange(guideEfficacyMinimum, guideEfficacyMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize ID Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeID() {
		setGuideID(getSocialResources().getNextGuideID());
		int incrementGuideID = getGuideID() + 1;

		getSocialResources().setNextGuideID(incrementGuideID);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Contribution Per Learner.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getContributionPerLearner() {
		if (getSocialResources().getLearnerCount() > 0) {
			return getContributionTotal() / getLearnerCount();

		}
		if (getLearnerCount() == 0) {
			return 00;

		}
		return 0.0;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Efficacy property for Guide.
	 * @return How effective is this guide at instilling an interest in learning to the learners he or she encounters?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getEfficacy() {
		return efficacy;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Efficacy property for Guide.
	 * How effective is this guide at instilling an interest in learning to the learners he or she encounters?
	 * @param _efficacy the new Efficacy value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEfficacy(double _efficacy) {
		efficacy = _efficacy;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide ID property for Guide.
	 * @return A unique identifier for the resource.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getGuideID() {
		return guideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide ID property for Guide.
	 * A unique identifier for the resource.
	 * @param _guideID the new Guide ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideID(int _guideID) {
		guideID = _guideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Contribution Total property for Guide.
	 * @return How much has this guide contributed to growing learning interest for all learners he or she has encountered?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getContributionTotal() {
		return contributionTotal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Contribution Total property for Guide.
	 * How much has this guide contributed to growing learning interest for all learners he or she has encountered?
	 * @param _contributionTotal the new Contribution Total value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setContributionTotal(double _contributionTotal) {
		contributionTotal = _contributionTotal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner Count property for Guide.
	 * @return The number of learners with whom this guide interacts.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerCount() {
		return learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner Count property for Guide.
	 * The number of learners with whom this guide interacts.
	 * @param _learnerCount the new Learner Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerCount(int _learnerCount) {
		learnerCount = _learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Guide " + getUID();
		} else {
			return name;
		}
	}
}
