package edu.osu.synergies.simple.model2;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;
import org.eclipse.amp.escape.runtime.extension.IAgentChildProvider;

/**
 * <!-- begin-user-doc -->
 * Learner Java Implementation.
 * 
 * Generated by AMF for model: SocialResources.metaabm in project: edu.osu.synergies 
 * <!-- end-user-doc -->
 * @generated
 */
public class Learner extends CellOccupant implements IAgentChildProvider {

	/**
	 * <!-- begin-user-doc -->
	 * How engaged is the learner but the process of learning itelf?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double learningInterest = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * A unique identifier for the learner.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * (Internal Use.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double learnerIndex = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * A target resource that the learner may be seeking. Once a learner has identified a resource, the learner will seek this same resource out in the future unless they happen upon another resource. This id could be 0 in which case the learner hasn't identified a target learning resource.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int guideID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * To what extent has the learner contributed to the growth of their own learning interest, excluding the impact of guide influence?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double selfContribution = 0.0;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Learner.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Learner() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Learner clone = (Learner) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SocialResources getSocialResources() {
		return (SocialResources) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		List network = new ArrayList();
		network.addAll(((Graph) getSocialResources().getGuideRelationships()
				.getSpace()).getNeighborsFor(this));
		return network;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		setLearnerID(getSocialResources().getNextLearnerID());
		double initialInterest = initialInterest();
		int incrementNextLearnerID = getSocialResources().getNextLearnerID() + 1;
		getSocialResources().setNextLearnerID(incrementNextLearnerID);
		setLearningInterest(initialInterest);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Initial Interest.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double initialInterest() {
		double initialInterestMinimum = getSocialResources()
				.getInitialInterestMinimum();
		double initialInterestMaximum = getSocialResources()
				.getInitialInterestMaximum();
		return randomInRange(initialInterestMinimum, initialInterestMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Guided Growth Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void guidedGrowth() {
		final Guide guide = (Guide) ((org.ascape.model.space.Discrete) getSocialResources()
				.getGuideRelationships().getSpace()).findRandomNeighbor(this);
		if (guide != null) {
			double potentialInfluence = guide.getEfficacy()
					- getLearningInterest();
			if (potentialInfluence > 0) {
				double guideInfluence = potentialInfluence
						* guide.getSocialResources().getGuideContributionRate();
				double performanceAddGuideInfluence = guide
						.getContributionTotal() + guideInfluence;
				double newInterestLevel = getLearningInterest()
						+ guideInfluence;
				guide.setContributionTotal(performanceAddGuideInfluence);
				setLearningInterest(newInterestLevel);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Learner Index.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLearnerIndex() {
		return getLearnerID();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Pick Guide Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void pickGuide() {
		final Guide newGuide = (Guide) getSocialResources().getGuideScape()
				.findRandom();
		if (newGuide != null) {
			((org.ascape.model.space.Graph) getSocialResources()
					.getGuideRelationships().getSpace()).addNeighborSafe(this,
					newGuide, true);
			int guideIDAddZero = newGuide.getGuideID() + 0;
			int incrementLearnerCount = newGuide.getLearnerCount() + 1;
			setGuideID(guideIDAddZero);
			newGuide.setLearnerCount(incrementLearnerCount);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Self Directed Growth Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void selfDirectedGrowth() {
		double potentialInterestGrowth = getLearningInterest()
				- getSocialResources().getSelfContributionThreshold();
		if (potentialInterestGrowth > 0) {
			double selfInfluence = potentialInterestGrowth
					* getSocialResources().getSelfContributionRate();
			double learningInterestAddSelfInfluence = getLearningInterest()
					+ selfInfluence;
			double minimum_LearningInterestAddSelfInfluenceUnit_ = java.lang.Math
					.min(learningInterestAddSelfInfluence, 1);
			double actualGrowth = minimum_LearningInterestAddSelfInfluenceUnit_
					- getLearningInterest();
			setLearningInterest(minimum_LearningInterestAddSelfInfluenceUnit_);
			double selfContributionAddActualGrowth = getSelfContribution()
					+ actualGrowth;
			setSelfContribution(selfContributionAddActualGrowth);
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learning Interest property for Learner.
	 * @return How engaged is the learner but the process of learning itelf?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLearningInterest() {
		return learningInterest;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learning Interest property for Learner.
	 * How engaged is the learner but the process of learning itelf?
	 * @param _learningInterest the new Learning Interest value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearningInterest(double _learningInterest) {
		learningInterest = _learningInterest;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner ID property for Learner.
	 * @return A unique identifier for the learner.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerID() {
		return learnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner ID property for Learner.
	 * A unique identifier for the learner.
	 * @param _learnerID the new Learner ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerID(int _learnerID) {
		learnerID = _learnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide ID property for Learner.
	 * @return A target resource that the learner may be seeking. Once a learner has identified a resource, the learner will seek this same resource out in the future unless they happen upon another resource. This id could be 0 in which case the learner hasn't identified a target learning resource.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getGuideID() {
		return guideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide ID property for Learner.
	 * A target resource that the learner may be seeking. Once a learner has identified a resource, the learner will seek this same resource out in the future unless they happen upon another resource. This id could be 0 in which case the learner hasn't identified a target learning resource.
	 * @param _guideID the new Guide ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideID(int _guideID) {
		guideID = _guideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Self Contribution property for Learner.
	 * @return To what extent has the learner contributed to the growth of their own learning interest, excluding the impact of guide influence?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSelfContribution() {
		return selfContribution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Self Contribution property for Learner.
	 * To what extent has the learner contributed to the growth of their own learning interest, excluding the impact of guide influence?
	 * @param _selfContribution the new Self Contribution value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSelfContribution(double _selfContribution) {
		selfContribution = _selfContribution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Learner " + getUID();
		} else {
			return name;
		}
	}
}
