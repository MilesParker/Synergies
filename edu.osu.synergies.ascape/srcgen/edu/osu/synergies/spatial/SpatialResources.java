package edu.osu.synergies.spatial;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Singleton;
import org.ascape.model.space.Location;
import org.ascape.util.Conditional;

/**
 * <!-- begin-user-doc -->
 * Spatial Resources Java Implementation.
 * <h3>Model I of the Synergies project demonstration models</h3>
<p>The purpose of this model is to explore the interation effects of learners and learning resources across space.
The closer you are to a resource, the more likely you are to engage with it. The more you know a resource the more likely you are to engage with it in the future.
How might these basic assumptions effect the distribution of learning interest across a diverse community?</p>
<i>Synergies Project: John Falk, Lynn Direking, Bill Penuel, Miles Parker
Model Development: Miles Parker</i>
 * Generated by AMF for model: SpatialResources.metaabm in project: edu.osu.synergies.ascape 
 * <!-- end-user-doc -->
 * @generated
 */
public class SpatialResources extends Scape {

	/**
	 * <!-- begin-user-doc -->
	 * The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerCount = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The number of learning resources to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learningResourceCount = 10;
	/**
	 * <!-- begin-user-doc -->
	 * The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMinimum = 0.05;
	/**
	 * <!-- begin-user-doc -->
	 * The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMaximum = 0.35;
	/**
	 * <!-- begin-user-doc -->
	 * The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double resourceEfficacyMinimum = 0.02;
	/**
	 * <!-- begin-user-doc -->
	 * The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double resourceEfficacyMaximum = 0.09;
	/**
	 * <!-- begin-user-doc -->
	 * The number of homes to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int homeCount = 150;
	/**
	 * <!-- begin-user-doc -->
	 * The current time segment in the day. This could represent a slice of time, such as 15 minutes or an hour as defined by Time Segments in Day and is a value between 0 (inclusive) and Time Segments in Day (exclusive).
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double timeSegment = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * The number of time segments in the day. The default value is 96, representing time slices of 15 minute increments [24 * (60 / 15) = 96].
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double timeSegmentsinDay = 48;
	/**
	 * <!-- begin-user-doc -->
	 * The time a learner spends "wandering", that is not engaged in activities at home. (In this intentionally simplified model, school locations are not represented.) The default value is 24, representing 6 hours (24 / (60 / 15) = 6).
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int timeSegmentsWandering = 24;
	/**
	 * <!-- begin-user-doc -->
	 * Are the learners currently wandering? In this model, all learners wanred at the same time, representing for example time after normal school hours.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean wandering = false;
	/**
	 * <!-- begin-user-doc -->
	 * (Supports unique IDs for learners.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextLearnerID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * (Supports unique IDs for resources.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextResourceID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * (Supports unique IDs for homes.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextHomeID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * The increasing effect that each subsequent encounter with a learning resource will have on learner interest. This represents the notion that as learners become more familiar with a learning resource the learner is able to get more out of that resource. For example, once a learner knows how to find the books she's interested in at the library, the easier it will be for her to discover books that she might be interested in.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double subsequentEngagementFactor = .05;
	/**
	 * <!-- begin-user-doc -->
	 * The number of lots to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int lotCount = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private ResourceDistributionEnum resourceDistribution = ResourceDistributionEnum.regular;
	/**
	 * <!-- begin-user-doc -->
	 * When distributing regularly, the number of rows of resources to create. That is, how many horizontal lines will we ditribute all resources across?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int regularYCount = 2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double biasedRegionX = .5;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double biasedRegionY = .5;
	/**
	 * <!-- begin-user-doc -->
	 * The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int districtWidth = 150;
	/**
	 * <!-- begin-user-doc -->
	 * The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int districtHeight = 80;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape district = null;

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Spatial Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SpatialResources() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			SpatialResources clone = (SpatialResources) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	org.ascape.model.Scape homeScape;
	org.ascape.model.Scape learnerScape;
	org.ascape.model.Scape learningResourceScape;
	org.ascape.model.Scape resourceInteractionScape;

	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Home that will be used to populate the homeScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Home createHomePrototype() {
		Home home = new Home();
		return home;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Learner that will be used to populate the learnerScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Learner createLearnerPrototype() {
		Learner learner = new Learner();
		learner.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return learner;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Learning Resource that will be used to populate the learningResourceScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LearningResource createLearningResourcePrototype() {
		LearningResource learningResource = new LearningResource();
		learningResource.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return learningResource;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Resource Interaction that will be used to populate the resourceInteractionScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInteraction createResourceInteractionPrototype() {
		ResourceInteraction resourceInteraction = new ResourceInteraction();
		return resourceInteraction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	static int next_vm_id;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	int vm_unique_id;

	/**
	 * <!-- begin-user-doc -->
	 * Creates the members of Spatial Resources.
	 * <!-- end-user-doc --> 
	 * @generated
	 */
	public void createScape() {
		super.createScape();

		setName("Spatial Resources");
		//A manager scape provides rule execution and stat collection for itself.
		if (isRoot()) {
			Scape spatialResourcesManager = new Scape(new Singleton());
			add(spatialResourcesManager);
			spatialResourcesManager.addInitialRule(new Rule("Initialize") {
				private static final long serialVersionUID = 6846144446402098981L;
				public void execute(Agent a) {
					((SpatialResources) a.getScape()).intializeNonFramework();
				}
			});
		}
		Home homeProto = createHomePrototype();
		homeScape = new Scape();
		homeScape.setName("Homes");
		homeScape.setPrototypeAgent(homeProto);
		homeScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(homeProto);

		Learner learnerProto = createLearnerPrototype();
		learnerScape = new Scape();
		learnerScape.setName("Learners");
		learnerScape.setPrototypeAgent(learnerProto);
		learnerScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(learnerProto);

		LearningResource learningResourceProto = createLearningResourcePrototype();
		learningResourceScape = new Scape();
		learningResourceScape.setName("Learning Resources");
		learningResourceScape.setPrototypeAgent(learningResourceProto);
		learningResourceScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(learningResourceProto);

		ResourceInteraction resourceInteractionProto = createResourceInteractionPrototype();
		resourceInteractionScape = new Scape();
		resourceInteractionScape.setName("Resource Interactions");
		resourceInteractionScape.setPrototypeAgent(resourceInteractionProto);
		resourceInteractionScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(resourceInteractionProto);

		learnerScape.setSize(getLearnerCount());
		learningResourceScape.setSize(getLearningResourceCount());
		homeScape.setSize(getHomeCount());
		resourceInteractionScape.setSize(0);
		district = new Scape(new org.ascape.model.space.Array2DEuclidian());
		district.setExecutionOrder(Scape.RULE_ORDER);
		Lot protoLot = new Lot();
		district.setPrototypeAgent(protoLot);
		district.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getDistrictWidth(), getDistrictHeight()));

		district.setName("Districts");
		((CollectionSpace) district.getSpace()).setPeriodic(false);
		add(district);
		org.ascape.model.Scape lotScape = district;
		createExtensions(protoLot);

		add(homeScape);

		createExtensions(homeProto);

		add(learnerScape);

		createExtensions(learnerProto);

		add(learningResourceScape);

		createExtensions(learningResourceProto);

		add(resourceInteractionScape);

		createExtensions(resourceInteractionProto);

		learningResourceProto.setHostScape(district);
		learnerProto.setHostScape(district);
		district.getRules().clear();

		homeScape.addStatCollector(new org.ascape.util.data.StatCollectorCond(
				homeScape.getName() + " Population") {
			private static final long serialVersionUID = 1L;
			@SuppressWarnings("unused")
			public final boolean meetsCondition(Object object) {
				return true;
			}
		});

		createExtensions(homeProto);

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						learnerScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Learning Interest") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getLearningInterest();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Resource Engagements") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getResourceEngagements();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Learner Not Interested Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object learner) {
						return BehaviorEnum.notInterested == ((Learner) learner)
								.getBehavior();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Learner Seeking Resource Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object learner) {
						return BehaviorEnum.seekingResource == ((Learner) learner)
								.getBehavior();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Learner Found Resource Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object learner) {
						return BehaviorEnum.foundResource == ((Learner) learner)
								.getBehavior();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						"Learner At Home Behavior") {
					private static final long serialVersionUID = 1L;
					public final boolean meetsCondition(Object learner) {
						return BehaviorEnum.atHome == ((Learner) learner)
								.getBehavior();
					}
				});

		createExtensions(learnerProto);

		learningResourceScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						learningResourceScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		learningResourceScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learning Resource Learner Interactions") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learningResource) {
						return ((LearningResource) learningResource)
								.getLearnerInteractions();
					}
				});

		createExtensions(learningResourceProto);

		resourceInteractionScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						resourceInteractionScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		createExtensions(resourceInteractionProto);

		homeScape.addInitialRule(new Rule("Initialize Location") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Home) a).initializeLocation();
			}
		});

		homeScape.addInitialRule(new Rule("Initialize ID") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Home) a).initializeID();
			}
		});

		learnerScape.addInitialRule(new Rule("Initialize Location") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).initializeLocation();
			}
		});

		learnerScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).initializeState();
			}
		});
		learnerScape.addRule(new Rule("Movement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).movement();
			}
		});
		learnerScape.addRule(new Rule("Resource Engagement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).resourceEngagement();
			}
		});
		learnerScape.addRule(new Rule("Start Day") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).startDay();
			}
		});

		learnerScape.addInitialRule(new Rule("Find Home") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.Learner) a).findHome();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize Location") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.LearningResource) a)
						.initializeLocation();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.LearningResource) a)
						.initializeState();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize ID") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.spatial.LearningResource) a).initializeID();
			}
		});
		createExtensions(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * Creates UI views for Spatial Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		{
			org.ascape.view.vis.Overhead2DView districtView = new org.ascape.view.vis.Overhead2DView();
			districtView.setAgentSize(5);
			district.addView(districtView);
			org.ascape.util.vis.DrawFeature lotStyle2D = new edu.osu.synergies.spatial.LotStyle2D();
			lotStyle2D.setName("Lot Style 2D");
			district.addDrawFeature(lotStyle2D);
			org.ascape.util.vis.DrawFeature learningResourceStyle2D = new edu.osu.synergies.spatial.LearningResourceStyle2D();
			learningResourceStyle2D.setName("Learning Resource Style 2D");
			district.addDrawFeature(learningResourceStyle2D);
			org.ascape.util.vis.DrawFeature learnerStyle2D = new edu.osu.synergies.spatial.LearnerStyle2D();
			learnerStyle2D.setName("Learner Style 2D");
			district.addDrawFeature(learnerStyle2D);
			districtView.getDrawSelection().setSelected(
					learningResourceStyle2D, true);
			districtView.getDrawSelection().setSelected(learnerStyle2D, true);
			districtView.getDrawSelection().setSelected(lotStyle2D, true);
			districtView.getDrawSelection().setSelected(
					districtView.agents_oval_cells_draw_feature, false);
			districtView.getDrawSelection().setSelected(
					districtView.cells_fill_draw_feature, true);
			districtView.getDrawSelection().moveToFront(
					districtView.cells_fill_draw_feature);
		}
		{
			org.ascape.view.vis.ChartView chart = new org.ascape.view.vis.ChartView();
			addView(chart);
			//if (getRunner().getEnvironment() instanceof org.ascape.runtime.applet.AppletEnvironment) {
			//    chart.getChart().getLegend().setAnchor(com.jrefinery.chart.Legend.SOUTH);
			//}
			Graphics dummyGraphics = new BufferedImage(10, 10,
					BufferedImage.TYPE_INT_RGB).getGraphics();

			final SpatialResources homeScape = new SpatialResources();
			homeScape.setRunner(new org.ascape.runtime.NonGraphicRunner());
			Home home = new Home() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public SpatialResources getSpatialResources() {
					return homeScape;
				}
			};
			homeScape.add(home);
			org.ascape.model.HostCell homeHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			homeHost.setOccupant((org.ascape.model.CellOccupant) home);

			HomeStyle2D homeStyle2D = new HomeStyle2D();

			final SpatialResources learnerScape = new SpatialResources();
			learnerScape.setRunner(new org.ascape.runtime.NonGraphicRunner());
			Learner learner = new Learner() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public SpatialResources getSpatialResources() {
					return learnerScape;
				}
			};
			learnerScape.add(learner);
			org.ascape.model.HostCell learnerHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			learnerHost.setOccupant((org.ascape.model.CellOccupant) learner);

			LearnerStyle2D learnerStyle2D = new LearnerStyle2D();

			learner.setBehavior(BehaviorEnum.notInterested);

			learnerStyle2D.draw(dummyGraphics, learnerHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Learner Not Interested Behavior",
						agentColor);
			}

			learner.setBehavior(BehaviorEnum.seekingResource);

			learnerStyle2D.draw(dummyGraphics, learnerHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Learner Seeking Resource Behavior",
						agentColor);
			}

			learner.setBehavior(BehaviorEnum.foundResource);

			learnerStyle2D.draw(dummyGraphics, learnerHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Learner Found Resource Behavior",
						agentColor);
			}

			learner.setBehavior(BehaviorEnum.atHome);

			learnerStyle2D.draw(dummyGraphics, learnerHost, 4, 4);
			{
				Color agentColor = dummyGraphics.getColor();
				chart.addSeries("Count Learner At Home Behavior", agentColor);
			}

			final SpatialResources learningResourceScape = new SpatialResources();
			learningResourceScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			LearningResource learningResource = new LearningResource() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public SpatialResources getSpatialResources() {
					return learningResourceScape;
				}
			};
			learningResourceScape.add(learningResource);
			org.ascape.model.HostCell learningResourceHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			learningResourceHost
					.setOccupant((org.ascape.model.CellOccupant) learningResource);

			LearningResourceStyle2D learningResourceStyle2D = new LearningResourceStyle2D();

			final SpatialResources resourceInteractionScape = new SpatialResources();
			resourceInteractionScape
					.setRunner(new org.ascape.runtime.NonGraphicRunner());
			ResourceInteraction resourceInteraction = new ResourceInteraction() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public SpatialResources getSpatialResources() {
					return resourceInteractionScape;
				}
			};
			resourceInteractionScape.add(resourceInteraction);
			org.ascape.model.HostCell resourceInteractionHost = new org.ascape.model.HostCell() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}
			};
			resourceInteractionHost
					.setOccupant((org.ascape.model.CellOccupant) resourceInteraction);

			ResourceInteractionStyle2D resourceInteractionStyle2D = new ResourceInteractionStyle2D();

			final SpatialResources lotScape = new SpatialResources();
			lotScape.setRunner(new org.ascape.runtime.NonGraphicRunner());
			Lot lot = new Lot() {

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public void requestUpdate() {
				}

				/**
				 * <!-- begin-user-doc -->
				 * 
				 * <!-- end-user-doc -->
				 * @generated
				 */
				public SpatialResources getSpatialResources() {
					return lotScape;
				}
			};
			lotScape.add(lot);

			LotStyle2D lotStyle2D = new LotStyle2D();
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void scapeSetup(ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		learnerScape.setSize(getLearnerCount());
		learningResourceScape.setSize(getLearningResourceCount());
		homeScape.setSize(getHomeCount());
		resourceInteractionScape.setSize(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Homes.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getHomeScape() {
		return homeScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Learners.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getLearnerScape() {
		return learnerScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Learning Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getLearningResourceScape() {
		return learningResourceScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Resource Interactions.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getResourceInteractionScape() {
		return resourceInteractionScape;
	}

	public void createExtensions(Object object) {
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static void main(String[] args) {
		(new org.ascape.runtime.swing.SwingRunner()).open(
				"edu.osu.synergies.spatial.SpatialResources", args);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Color getColor() {
		return Color.LIGHT_GRAY;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Time Segment.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getTimeSegment() {
		int now = //timeNow
		getPeriod();

		return //mod
		now % getTimeSegmentsinDay();

	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Wandering.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isWandering() {
		return //lesserorEqual
		getTimeSegment() <= getTimeSegmentsWandering();

	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		setNextLearnerID(0);
		setNextResourceID(0);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner Count property for Spatial Resources.
	 * @return The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerCount() {
		return learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner Count property for Spatial Resources.
	 * The number of learners to create.
	 * @param _learnerCount the new Learner Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerCount(int _learnerCount) {
		learnerCount = _learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learning Resource Count property for Spatial Resources.
	 * @return The number of learning resources to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearningResourceCount() {
		return learningResourceCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learning Resource Count property for Spatial Resources.
	 * The number of learning resources to create.
	 * @param _learningResourceCount the new Learning Resource Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearningResourceCount(int _learningResourceCount) {
		learningResourceCount = _learningResourceCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Minimum property for Spatial Resources.
	 * @return The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMinimum() {
		return initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Minimum property for Spatial Resources.
	 * The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * @param _initialInterestMinimum the new Initial Interest Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMinimum(double _initialInterestMinimum) {
		initialInterestMinimum = _initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Maximum property for Spatial Resources.
	 * @return The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMaximum() {
		return initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Maximum property for Spatial Resources.
	 * The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * @param _initialInterestMaximum the new Initial Interest Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMaximum(double _initialInterestMaximum) {
		initialInterestMaximum = _initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Efficacy Minimum property for Spatial Resources.
	 * @return The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getResourceEfficacyMinimum() {
		return resourceEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Efficacy Minimum property for Spatial Resources.
	 * The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * @param _resourceEfficacyMinimum the new Resource Efficacy Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceEfficacyMinimum(double _resourceEfficacyMinimum) {
		resourceEfficacyMinimum = _resourceEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Efficacy Maximum property for Spatial Resources.
	 * @return The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getResourceEfficacyMaximum() {
		return resourceEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Efficacy Maximum property for Spatial Resources.
	 * The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * @param _resourceEfficacyMaximum the new Resource Efficacy Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceEfficacyMaximum(double _resourceEfficacyMaximum) {
		resourceEfficacyMaximum = _resourceEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Home Count property for Spatial Resources.
	 * @return The number of homes to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHomeCount() {
		return homeCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Home Count property for Spatial Resources.
	 * The number of homes to create.
	 * @param _homeCount the new Home Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHomeCount(int _homeCount) {
		homeCount = _homeCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Time Segments in Day property for Spatial Resources.
	 * @return The number of time segments in the day. The default value is 96, representing time slices of 15 minute increments [24 * (60 / 15) = 96].
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getTimeSegmentsinDay() {
		return timeSegmentsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Time Segments in Day property for Spatial Resources.
	 * The number of time segments in the day. The default value is 96, representing time slices of 15 minute increments [24 * (60 / 15) = 96].
	 * @param _timeSegmentsinDay the new Time Segments in Day value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTimeSegmentsinDay(double _timeSegmentsinDay) {
		timeSegmentsinDay = _timeSegmentsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Time Segments Wandering property for Spatial Resources.
	 * @return The time a learner spends "wandering", that is not engaged in activities at home. (In this intentionally simplified model, school locations are not represented.) The default value is 24, representing 6 hours (24 / (60 / 15) = 6).
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTimeSegmentsWandering() {
		return timeSegmentsWandering;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Time Segments Wandering property for Spatial Resources.
	 * The time a learner spends "wandering", that is not engaged in activities at home. (In this intentionally simplified model, school locations are not represented.) The default value is 24, representing 6 hours (24 / (60 / 15) = 6).
	 * @param _timeSegmentsWandering the new Time Segments Wandering value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTimeSegmentsWandering(int _timeSegmentsWandering) {
		timeSegmentsWandering = _timeSegmentsWandering;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Learner ID property for Spatial Resources.
	 * @return (Supports unique IDs for learners.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextLearnerID() {
		return nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Learner ID property for Spatial Resources.
	 * (Supports unique IDs for learners.)
	 * @param _nextLearnerID the new Next Learner ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextLearnerID(int _nextLearnerID) {
		nextLearnerID = _nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Resource ID property for Spatial Resources.
	 * @return (Supports unique IDs for resources.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextResourceID() {
		return nextResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Resource ID property for Spatial Resources.
	 * (Supports unique IDs for resources.)
	 * @param _nextResourceID the new Next Resource ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextResourceID(int _nextResourceID) {
		nextResourceID = _nextResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Home ID property for Spatial Resources.
	 * @return (Supports unique IDs for homes.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextHomeID() {
		return nextHomeID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Home ID property for Spatial Resources.
	 * (Supports unique IDs for homes.)
	 * @param _nextHomeID the new Next Home ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextHomeID(int _nextHomeID) {
		nextHomeID = _nextHomeID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Subsequent Engagement Factor  property for Spatial Resources.
	 * @return The increasing effect that each subsequent encounter with a learning resource will have on learner interest. This represents the notion that as learners become more familiar with a learning resource the learner is able to get more out of that resource. For example, once a learner knows how to find the books she's interested in at the library, the easier it will be for her to discover books that she might be interested in.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSubsequentEngagementFactor() {
		return subsequentEngagementFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Subsequent Engagement Factor  property for Spatial Resources.
	 * The increasing effect that each subsequent encounter with a learning resource will have on learner interest. This represents the notion that as learners become more familiar with a learning resource the learner is able to get more out of that resource. For example, once a learner knows how to find the books she's interested in at the library, the easier it will be for her to discover books that she might be interested in.
	 * @param _subsequentEngagementFactor the new Subsequent Engagement Factor  value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSubsequentEngagementFactor(double _subsequentEngagementFactor) {
		subsequentEngagementFactor = _subsequentEngagementFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Lot Count property for Spatial Resources.
	 * @return The number of lots to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLotCount() {
		return lotCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Lot Count property for Spatial Resources.
	 * The number of lots to create.
	 * @param _lotCount the new Lot Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLotCount(int _lotCount) {
		lotCount = _lotCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Distribution property for Spatial Resources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceDistributionEnum getResourceDistribution() {
		return resourceDistribution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Distribution property for Spatial Resources.
	 * 
	 * @param _resourceDistribution the new Resource Distribution value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceDistribution(
			ResourceDistributionEnum _resourceDistribution) {
		resourceDistribution = _resourceDistribution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the RegularYCount property for Spatial Resources.
	 * @return When distributing regularly, the number of rows of resources to create. That is, how many horizontal lines will we ditribute all resources across?
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getRegularYCount() {
		return regularYCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the RegularYCount property for Spatial Resources.
	 * When distributing regularly, the number of rows of resources to create. That is, how many horizontal lines will we ditribute all resources across?
	 * @param _regularYCount the new RegularYCount value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setRegularYCount(int _regularYCount) {
		regularYCount = _regularYCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the BiasedRegionX property for Spatial Resources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBiasedRegionX() {
		return biasedRegionX;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the BiasedRegionX property for Spatial Resources.
	 * 
	 * @param _biasedRegionX the new BiasedRegionX value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBiasedRegionX(double _biasedRegionX) {
		biasedRegionX = _biasedRegionX;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the BiasedRegionY property for Spatial Resources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getBiasedRegionY() {
		return biasedRegionY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the BiasedRegionY property for Spatial Resources.
	 * 
	 * @param _biasedRegionY the new BiasedRegionY value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBiasedRegionY(double _biasedRegionY) {
		biasedRegionY = _biasedRegionY;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Width property for District.
	 * @return The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDistrictWidth() {
		return districtWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Width property for District.
	 * The horizontal extent of the space.
	 * @param _districtWidth the new Width value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrictWidth(int _districtWidth) {
		districtWidth = _districtWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Height property for District.
	 * @return The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDistrictHeight() {
		return districtHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Height property for District.
	 * The vertical extent of the space.
	 * @param _districtHeight the new Height value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrictHeight(int _districtHeight) {
		districtHeight = _districtHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the District property for Spatial Resources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getDistrict() {
		return district;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the District property for Spatial Resources.
	 * 
	 * @param _district the new District value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrict(Scape _district) {
		district = _district;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Spatial Resources " + getUID();
		} else {
			return name;
		}
	}
}
