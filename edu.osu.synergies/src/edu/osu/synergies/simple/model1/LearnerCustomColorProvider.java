package edu.osu.synergies.simple.model1;

import org.ascape.util.data.UnitIntervalDataPoint;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureGradiated;
import org.ascape.util.vis.ColorFeatureGradiatedIndex;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.widgets.Display;
import org.eclipse.draw2d.Shape;
import org.eclipse.draw2d.ColorConstants;

import org.eclipse.jface.viewers.IColorProvider;

/**
 * <!-- begin-user-doc --> Learning Resource Style 2D Java Implementation.
 * 
 * Generated by AMF for model: SpatialResources.metaabm in project:
 * edu.osu.synergies <!-- end-user-doc -->
 * 
 * @generated
 */
public class LearnerCustomColorProvider implements IColorProvider {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	private static IColorProvider singleton;
	private ColorFeatureGradiated colorForInterest;

	public LearnerCustomColorProvider() {
		colorForInterest = new ColorFeatureGradiatedIndex(
				"Avg Output");
		colorForInterest.setDataPoint(new UnitIntervalDataPoint() {
			/**
             * 
             */
			private static final long serialVersionUID = -6033261844239803432L;

			public double getValue(Object object) {
				Learner learner = (Learner) object;
				double interest = learner.getLearningInterest();
				if (interest > 1.0) {
					return 1.0;
				}
				return interest;
			}
		});
		colorForInterest.setMaximumColor(ColorFeature.GREEN);
		colorForInterest.setMinimumColor(ColorFeature.RED);
	}

	/**
	 * <!-- begin-user-doc --> Provides a color for Learning Resource based on
	 * wether we want to fill or not.
	 * 
	 * @param object
	 *            the agent
	 * @return the foreground color for the element, or <code>null</code> to use
	 *         the default foreground color <!-- end-user-doc -->
	 * @generated
	 */
	public Color getColor(Object object, boolean fill) {
		return colorForInterest.getColor(object);
	}

	/**
	 * <!-- begin-user-doc --> Provides a foreground color for the given
	 * Learning Resource.
	 * 
	 * @param object
	 *            the agent
	 * @return the foreground color for the element, or <code>null</code> to use
	 *         the default foreground color <!-- end-user-doc -->
	 * @generated
	 */
	public Color getForeground(Object object) {
		return colorForInterest.getColor(object);
	}

	/**
	 * <!-- begin-user-doc --> Provides a background color for the given
	 * Learning Resource.
	 * 
	 * @param object
	 *            the agent
	 * @return the background color for the element, or <code>null</code> to use
	 *         the default background color <!-- end-user-doc -->
	 * @generated
	 */
	public Color getBackground(Object object) {
		return colorForInterest.getColor(object);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public static IColorProvider getDefault() {
		if (singleton == null) {
			singleton = new LearnerCustomColorProvider();
		}
		return singleton;
	}
}
