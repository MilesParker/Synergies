package edu.osu.synergies.social;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;
import org.eclipse.amp.escape.runtime.extension.IAgentChildProvider;

/**
 * <!-- begin-user-doc -->
 * Social Resources Java Implementation.
 * <h3>Model II of the Synergies project demonstration models</h3> The purpose of this model is to explore the interaction effects of learners and guides, e.g. club mentors, librarians and museum docents.
The model shows how two dynamics work together. 
<ul><li>First, guides have an impact on learners by encouraging their interest in learning itself. Not all guides are created equal -- some guides are much more effective at increasing learning interest over time. But no matter how effective a guide is, there are limits to how much effect they can have on a given learner.</li><li>Second, a learner's learning interest grows by itself over time. This effect is self-reinforcing, the more a learner becomes engaged in learning, the more their learning interest will grow. There is a minimum level below which some learners will not be able to grow their own learning interest at all, and this is where a guide's influence could be most crucial.</li></ul>
<i>Synergies Project: John Falk, Lynn Direking, Bill Penuel, Miles Parker
Model Development: Miles Parker</i>
 * Generated by AMF for model: SocialResources.metaabm in project: edu.osu.synergies 
 * <!-- end-user-doc -->
 * @generated
 */
public class SocialResources extends Scape
		implements
			IGraphicsAdapted,
			IAgentChildProvider {

	/**
	 * <!-- begin-user-doc -->
	 * The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerCount = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The number of guides to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int guideCount = 10;
	/**
	 * <!-- begin-user-doc -->
	 * The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMinimum = 0.05;
	/**
	 * <!-- begin-user-doc -->
	 * The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMaximum = 0.35;
	/**
	 * <!-- begin-user-doc -->
	 * The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double guideEfficacyMinimum = .2;
	/**
	 * <!-- begin-user-doc -->
	 * The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double guideEfficacyMaximum = .8;
	/**
	 * <!-- begin-user-doc -->
	 * (Supports unique IDs for learners.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextLearnerID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * (Supports unique IDs for resources.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextGuideID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * Determines the relative level of influence a guide can have on a learner within one model period. See the learning related actions for more details.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double guideContributionRate = .01;
	/**
	 * <!-- begin-user-doc -->
	 * Determines the relative level of influence a learner can have on their own learning interest within one model period. See the learning related actions for more details.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double selfContributionRate = .01;
	/**
	 * <!-- begin-user-doc -->
	 * This is the point below which learners are not able to contribute to the growth of their own learning at all. Of course, all people at all ages have some self-motivation to learn but this represents the line below which this interest might not become self-reinforcing.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double selfContributionThreshold = .2;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape guideRelationships = null;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Social Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SocialResources() {

		children = new ArrayList<IAgentChild>();

		children = new ArrayList<IAgentChild>();

	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			SocialResources clone = (SocialResources) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	org.ascape.model.Scape guideScape;
	org.ascape.model.Scape learnerScape;

	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Guide that will be used to populate the guideScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Guide createGuidePrototype() {
		Guide guide = new Guide();
		return guide;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Learner that will be used to populate the learnerScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Learner createLearnerPrototype() {
		Learner learner = new Learner();
		return learner;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	static int next_vm_id;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	int vm_unique_id;

	/**
	 * <!-- begin-user-doc -->
	 * Creates the members of Social Resources.
	 * <!-- end-user-doc --> 
	 * @generated
	 */
	public void createScape() {
		super.createScape();

		setName("Social Resources");
		//A manager scape provides rule execution and stat collection for itself.
		if (isRoot()) {
			Scape socialResourcesManager = new Scape(new Singleton());
			add(socialResourcesManager);
			socialResourcesManager.addInitialRule(new Rule("Initialize") {
				private static final long serialVersionUID = 6846144446402098981L;
				public void execute(Agent a) {
					((SocialResources) a.getScape()).intializeNonFramework();
				}
			});
		}
		Guide guideProto = createGuidePrototype();
		guideScape = new Scape();
		guideScape.setName("Guides");
		guideScape.setPrototypeAgent(guideProto);
		guideScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(guideProto);

		Learner learnerProto = createLearnerPrototype();
		learnerScape = new Scape();
		learnerScape.setName("Learners");
		learnerScape.setPrototypeAgent(learnerProto);
		learnerScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(learnerProto);

		learnerScape.setSize(getLearnerCount());
		guideScape.setSize(getGuideCount());
		guideRelationships = new Scape(new org.ascape.model.space.Graph());
		guideRelationships.setName("Guide Relationshipss");
		add(guideRelationships);

		add(guideScape);

		createExtensions(guideProto);

		add(learnerScape);

		createExtensions(learnerProto);

		guideScape.addStatCollector(new org.ascape.util.data.StatCollectorCond(
				guideScape.getName() + " Population") {
			private static final long serialVersionUID = 1L;
			@SuppressWarnings("unused")
			public final boolean meetsCondition(Object object) {
				return true;
			}
		});
		guideScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Guide Efficacy") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object guide) {
						return ((Guide) guide).getEfficacy();
					}
				});

		guideScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Guide Contribution Total") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object guide) {
						return ((Guide) guide).getContributionTotal();
					}
				});

		guideScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Guide Contribution Per Learner") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object guide) {
						return ((Guide) guide).getContributionPerLearner();
					}
				});

		createExtensions(guideProto);

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						learnerScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Learning Interest") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getLearningInterest();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Self Contribution") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getSelfContribution();
					}
				});

		createExtensions(learnerProto);

		guideScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Guide) a).initializeState();
			}
		});

		guideScape.addInitialRule(new Rule("Initialize ID") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Guide) a).initializeID();
			}
		});

		learnerScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Learner) a).initializeState();
			}
		});
		learnerScape.addRule(new Rule("Guided Growth") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Learner) a).guidedGrowth();
			}
		});

		learnerScape.addInitialRule(new Rule("Pick Guide") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Learner) a).pickGuide();
			}
		});
		learnerScape.addRule(new Rule("Self Directed Growth") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.social.Learner) a).selfDirectedGrowth();
			}
		});
		createExtensions(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * Creates UI views for Social Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		createChartViews();

		createGraphViews();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void scapeSetup(ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		learnerScape.setSize(getLearnerCount());
		guideScape.setSize(getGuideCount());
	}

	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Guides.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getGuideScape() {
		return guideScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Learners.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getLearnerScape() {
		return learnerScape;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createChartViews() {
		ChartView chart = new ChartView();

		final SocialResources guideScape = new SocialResources();
		guideScape.setRunner(new NonGraphicRunner());
		Guide guide = new Guide() {
			public void requestUpdate() {
			}
			public SocialResources getSocialResources() {
				return guideScape;
			}
		};
		guideScape.add(guide);
		HostCell guideHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		guideHost.setOccupant((CellOccupant) guide);

		IColorProvider guideStyle2DColorProvider = new GuideStyle2DColorProvider();

		final SocialResources learnerScape = new SocialResources();
		learnerScape.setRunner(new NonGraphicRunner());
		Learner learner = new Learner() {
			public void requestUpdate() {
			}
			public SocialResources getSocialResources() {
				return learnerScape;
			}
		};
		learnerScape.add(learner);
		HostCell learnerHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		learnerHost.setOccupant((CellOccupant) learner);

		IColorProvider learnerStyle2DColorProvider = new LearnerStyle2DColorProvider();
		addView(chart);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void create2DViews() {
		addView(new GEFView());
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createGraphViews() {
		guideRelationships.addView(new GraphView());
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGraphicsAdapter getGraphicsAdapter() {
		return SocialResourcesGraphicsAdapter.getDefault();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Color getInferredChartColor(Object agent,
			IColorProvider colorProvider) {
		Color color = colorProvider.getForeground(agent);
		if (color == ColorFeature.BLACK) {
			color = ColorFeatureConcrete.createHSB(
					(float) java.lang.Math.random() * 360f, 1.0f, 0.8f);
		}
		return color;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static void main(String[] args) {
		(new NonGraphicRunner())
				.openInstance("edu.osu.synergies.social.SocialResources");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <h3>Model II of the Synergies project demonstration models</h3> The purpose of this model is to explore the interaction effects of learners and guides, e.g. club mentors, librarians and museum docents.
	The model shows how two dynamics work together. 
	<ul><li>First, guides have an impact on learners by encouraging their interest in learning itself. Not all guides are created equal -- some guides are much more effective at increasing learning interest over time. But no matter how effective a guide is, there are limits to how much effect they can have on a given learner.</li><li>Second, a learner's learning interest grows by itself over time. This effect is self-reinforcing, the more a learner becomes engaged in learning, the more their learning interest will grow. There is a minimum level below which some learners will not be able to grow their own learning interest at all, and this is where a guide's influence could be most crucial.</li></ul>
	<i>Synergies Project: John Falk, Lynn Direking, Bill Penuel, Miles Parker
	Model Development: Miles Parker</i>
	 * <!-- end-user-doc -->
	 * @generated
	 */

	@Override
	public void executeOnMembers() {
		int timeStep = getRunner().getPeriod();
		startSimulationAgentChild(timeStep);

		//A normal movable agent
		((Guide) guideScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		//A normal movable agent
		((Learner) learnerScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		super.executeOnMembers();
		calculateTimeStep(timeStep);

		//A normal movable agent
		((Guide) guideScape.getPrototypeAgent()).calculateTimeStep(timeStep);

		//A normal movable agent
		((Learner) learnerScape.getPrototypeAgent())
				.calculateTimeStep(timeStep);

	}

	public void createExtensions(Object object) {
		if (object instanceof IAgentChildProvider) {
			for (IAgentChild tmp : ((IAgentChildProvider) object).getChildren()) {
				tmp.addDataCollectors(this);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <h3>Model II of the Synergies project demonstration models</h3> The purpose of this model is to explore the interaction effects of learners and guides, e.g. club mentors, librarians and museum docents.
	The model shows how two dynamics work together. 
	<ul><li>First, guides have an impact on learners by encouraging their interest in learning itself. Not all guides are created equal -- some guides are much more effective at increasing learning interest over time. But no matter how effective a guide is, there are limits to how much effect they can have on a given learner.</li><li>Second, a learner's learning interest grows by itself over time. This effect is self-reinforcing, the more a learner becomes engaged in learning, the more their learning interest will grow. There is a minimum level below which some learners will not be able to grow their own learning interest at all, and this is where a guide's influence could be most crucial.</li></ul>
	<i>Synergies Project: John Falk, Lynn Direking, Bill Penuel, Miles Parker
	Model Development: Miles Parker</i>
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <h3>Model II of the Synergies project demonstration models</h3> The purpose of this model is to explore the interaction effects of learners and guides, e.g. club mentors, librarians and museum docents.
	The model shows how two dynamics work together. 
	<ul><li>First, guides have an impact on learners by encouraging their interest in learning itself. Not all guides are created equal -- some guides are much more effective at increasing learning interest over time. But no matter how effective a guide is, there are limits to how much effect they can have on a given learner.</li><li>Second, a learner's learning interest grows by itself over time. This effect is self-reinforcing, the more a learner becomes engaged in learning, the more their learning interest will grow. There is a minimum level below which some learners will not be able to grow their own learning interest at all, and this is where a guide's influence could be most crucial.</li></ul>
	<i>Synergies Project: John Falk, Lynn Direking, Bill Penuel, Miles Parker
	Model Development: Miles Parker</i>
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		setNextLearnerID(0);
		setNextGuideID(0);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner Count property for Social Resources.
	 * @return The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerCount() {
		return learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner Count property for Social Resources.
	 * The number of learners to create.
	 * @param _learnerCount the new Learner Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerCount(int _learnerCount) {
		learnerCount = _learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide Count property for Social Resources.
	 * @return The number of guides to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getGuideCount() {
		return guideCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide Count property for Social Resources.
	 * The number of guides to create.
	 * @param _guideCount the new Guide Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideCount(int _guideCount) {
		guideCount = _guideCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Minimum property for Social Resources.
	 * @return The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMinimum() {
		return initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Minimum property for Social Resources.
	 * The minimum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * @param _initialInterestMinimum the new Initial Interest Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMinimum(double _initialInterestMinimum) {
		initialInterestMinimum = _initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Maximum property for Social Resources.
	 * @return The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMaximum() {
		return initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Maximum property for Social Resources.
	 * The maximum level of interest that a learner will have at the beginning of the model. Initial interest is distributed uniformally between the minimum and maximum value.
	 * @param _initialInterestMaximum the new Initial Interest Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMaximum(double _initialInterestMaximum) {
		initialInterestMaximum = _initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide Efficacy Minimum property for Social Resources.
	 * @return The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getGuideEfficacyMinimum() {
		return guideEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide Efficacy Minimum property for Social Resources.
	 * The minimum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * @param _guideEfficacyMinimum the new Guide Efficacy Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideEfficacyMinimum(double _guideEfficacyMinimum) {
		guideEfficacyMinimum = _guideEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide Efficacy Maximum property for Social Resources.
	 * @return The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getGuideEfficacyMaximum() {
		return guideEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide Efficacy Maximum property for Social Resources.
	 * The maximum efficacy that a given resource will make for learner interest in a given encounter. Efficacy is constant for a resource and affects all learners in the same way. It is distributed uniformally between the minimum and maximum value.
	 * @param _guideEfficacyMaximum the new Guide Efficacy Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideEfficacyMaximum(double _guideEfficacyMaximum) {
		guideEfficacyMaximum = _guideEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Learner ID property for Social Resources.
	 * @return (Supports unique IDs for learners.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextLearnerID() {
		return nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Learner ID property for Social Resources.
	 * (Supports unique IDs for learners.)
	 * @param _nextLearnerID the new Next Learner ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextLearnerID(int _nextLearnerID) {
		nextLearnerID = _nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Guide ID property for Social Resources.
	 * @return (Supports unique IDs for resources.)
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextGuideID() {
		return nextGuideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Guide ID property for Social Resources.
	 * (Supports unique IDs for resources.)
	 * @param _nextGuideID the new Next Guide ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextGuideID(int _nextGuideID) {
		nextGuideID = _nextGuideID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide Contribution Rate property for Social Resources.
	 * @return Determines the relative level of influence a guide can have on a learner within one model period. See the learning related actions for more details.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getGuideContributionRate() {
		return guideContributionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide Contribution Rate property for Social Resources.
	 * Determines the relative level of influence a guide can have on a learner within one model period. See the learning related actions for more details.
	 * @param _guideContributionRate the new Guide Contribution Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideContributionRate(double _guideContributionRate) {
		guideContributionRate = _guideContributionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Self Contribution Rate property for Social Resources.
	 * @return Determines the relative level of influence a learner can have on their own learning interest within one model period. See the learning related actions for more details.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSelfContributionRate() {
		return selfContributionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Self Contribution Rate property for Social Resources.
	 * Determines the relative level of influence a learner can have on their own learning interest within one model period. See the learning related actions for more details.
	 * @param _selfContributionRate the new Self Contribution Rate value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSelfContributionRate(double _selfContributionRate) {
		selfContributionRate = _selfContributionRate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Self Contribution Threshold property for Social Resources.
	 * @return This is the point below which learners are not able to contribute to the growth of their own learning at all. Of course, all people at all ages have some self-motivation to learn but this represents the line below which this interest might not become self-reinforcing.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSelfContributionThreshold() {
		return selfContributionThreshold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Self Contribution Threshold property for Social Resources.
	 * This is the point below which learners are not able to contribute to the growth of their own learning at all. Of course, all people at all ages have some self-motivation to learn but this represents the line below which this interest might not become self-reinforcing.
	 * @param _selfContributionThreshold the new Self Contribution Threshold value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSelfContributionThreshold(double _selfContributionThreshold) {
		selfContributionThreshold = _selfContributionThreshold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Guide Relationships property for Social Resources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getGuideRelationships() {
		return guideRelationships;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Guide Relationships property for Social Resources.
	 * 
	 * @param _guideRelationships the new Guide Relationships value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setGuideRelationships(Scape _guideRelationships) {
		guideRelationships = _guideRelationships;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Social Resources " + getUID();
		} else {
			return name;
		}
	}
}
