package edu.osu.synergies.simple.model1;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Singleton;
import org.ascape.model.space.Location;
import org.ascape.util.Conditional;

/**
 * <!-- begin-user-doc -->
 * Learning Resource Java Implementation.
 * 
 * Generated by AMF for model: SpatialResources.metaabm in project: edu.osu.synergies.ascape 
 * <!-- end-user-doc -->
 * @generated
 */
public class LearningResource extends CellOccupant {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double efficacy = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int resourceID = 0;

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Learning Resource.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LearningResource() {
	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			LearningResource clone = (LearningResource) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimpleResources getSimpleResources() {
		return (SimpleResources) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		return Collections.emptyList();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Color getColor() {
		return Color.LIGHT_GRAY;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		final Object learningResource = (Object) ((org.ascape.model.space.Discrete) getSimpleResources()
				.getDistrict().getSpace()).findRandomAvailable();
		if (learningResource != null) {
			if (getHostScape() != ((Agent) learningResource).getScape()) {
				die();
				getSimpleResources().getLearningResourceScape().add(this);
			}
			moveTo(((HostCell) learningResource));
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		double resourceEfficacy = resourceEfficacy();

		setEfficacy(resourceEfficacy);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Resource Efficacy.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double resourceEfficacy() {
		double resourceEfficacyMinimum = getSimpleResources()
				.getResourceEfficacyMinimum();
		double resourceEfficacyMaximum = getSimpleResources()
				.getResourceEfficacyMaximum();
		return randomInRange(resourceEfficacyMinimum, resourceEfficacyMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize ID Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeID() {
		setResourceID(getSimpleResources().getNextResourceID());
		int incrementResourceID = getResourceID() + 1;

		getSimpleResources().setNextResourceID(incrementResourceID);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Efficacy property for Learning Resource.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getEfficacy() {
		return efficacy;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Efficacy property for Learning Resource.
	 * 
	 * @param _efficacy the new Efficacy value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEfficacy(double _efficacy) {
		efficacy = _efficacy;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource ID property for Learning Resource.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getResourceID() {
		return resourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource ID property for Learning Resource.
	 * 
	 * @param _resourceID the new Resource ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceID(int _resourceID) {
		resourceID = _resourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Learning Resource " + getUID();
		} else {
			return name;
		}
	}
}
