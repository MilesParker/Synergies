package edu.osu.synergies.simple.model1;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;
import org.eclipse.amp.escape.runtime.extension.IAgentChildProvider;

/**
 * <!-- begin-user-doc -->
 * Learner Java Implementation.
 * 
 * Generated by AMF for model: SpatialResources.metaabm in project: edu.osu.synergies 
 * <!-- end-user-doc -->
 * @generated
 */
public class Learner extends CellOccupant implements IAgentChildProvider {

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double learningInterest = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double learnerIndex = 0.0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int resourceEngagements = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EngagementEnum engagement = EngagementEnum.notInterested;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int targetResourceID = 0;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new Learner.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Learner() {

		children = new ArrayList<IAgentChild>();

	}
	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			Learner clone = (Learner) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimpleResources getSimpleResources() {
		return (SimpleResources) getScape().getScape();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List getNetwork() {
		return Collections.emptyList();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Initialize Location Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeLocation() {
		final Object learner = (Object) ((org.ascape.model.space.Discrete) getSimpleResources()
				.getDistrict().getSpace()).findRandomAvailable();
		if (learner != null) {
			if (getHostScape() != ((Agent) learner).getScape()) {
				die();
				getSimpleResources().getLearnerScape().add(this);
			}
			moveTo(((HostCell) learner));
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize State Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializeState() {
		setLearnerID(getSimpleResources().getNextLearnerID());
		double initialInterest = initialInterest();
		int incrementNextLearnerID = getSimpleResources().getNextLearnerID() + 1;
		getSimpleResources().setNextLearnerID(incrementNextLearnerID);
		setLearningInterest(initialInterest);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Calculate Initial Interest.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double initialInterest() {
		double initialInterestMinimum = getSimpleResources()
				.getInitialInterestMinimum();
		double initialInterestMaximum = getSimpleResources()
				.getInitialInterestMaximum();
		return randomInRange(initialInterestMinimum, initialInterestMaximum);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Find Home Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void findHome() {
		final Home learnerCopy = (Home) ((org.ascape.model.space.Discrete) getSimpleResources()
				.getHomes().getSpace()).findRandomNeighbor(this);
		if (learnerCopy != null) {
		} else {
			Conditional learnerCopyCopyCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object learnerCopyCopyCell) {
					learnerCopyCopyCell = ((org.ascape.model.HostCell) learnerCopyCopyCell)
							.getOccupant();
					if (learnerCopyCopyCell instanceof Home) {
						return true;
					} else {
						return false;
					}
				}
			};
			final Location learnerCopyCopyLocation = ((org.ascape.model.space.Discrete) getSimpleResources()
					.getDistrict().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					learnerCopyCopyCondition, false, Double.MAX_VALUE);
			if (learnerCopyCopyLocation != null) {
				final Home learnerCopyCopy = (Home) ((org.ascape.model.HostCell) learnerCopyCopyLocation)
						.getOccupant();
				if (learnerCopyCopy != null) {
					((org.ascape.model.space.Graph) getSimpleResources()
							.getHomes().getSpace()).addNeighborSafe(this,
							learnerCopyCopy, true);
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Movement Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void movement() {
		if (getEngagement() == EngagementEnum.seekingResource
				&& getSimpleResources().isWandering()) {
			Conditional soughtResourceCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object soughtResourceCell) {
					soughtResourceCell = ((org.ascape.model.HostCell) soughtResourceCell)
							.getOccupant();
					if (soughtResourceCell instanceof LearningResource) {
						LearningResource soughtResource = (LearningResource) soughtResourceCell;
						return (soughtResource.getResourceID() == getTargetResourceID());
					} else {
						return false;
					}
				}
			};
			final Location soughtResourceLocation = ((org.ascape.model.space.Discrete) getSimpleResources()
					.getDistrict().getSpace()).findNearest(
					((org.ascape.model.CellOccupant) this).getHostCell(),
					soughtResourceCondition, false, Double.MAX_VALUE);
			if (soughtResourceLocation != null) {
				final LearningResource soughtResource = (LearningResource) ((org.ascape.model.HostCell) soughtResourceLocation)
						.getOccupant();
				if (soughtResource != null) {
					moveToward(((org.ascape.model.CellOccupant) soughtResource)
							.getHostCell());
				}
			}
		}
		if (getEngagement() == EngagementEnum.notInterested
				&& getSimpleResources().isWandering()) {
			final Object learnerCopyCopyCopy = (Object) ((org.ascape.model.space.Discrete) getSimpleResources()
					.getDistrict().getSpace())
					.findRandomAvailableNeighbor(((org.ascape.model.CellOccupant) this)
							.getHostCell());
			if (learnerCopyCopyCopy != null) {
				if (getHostScape() != ((Agent) learnerCopyCopyCopy).getScape()) {
					die();
					getSimpleResources().getLearnerScape().add(this);
				}
				moveTo(((HostCell) learnerCopyCopyCopy));
			}
		}
		if (!getSimpleResources().isWandering()) {
			final Home learnerHome = (Home) ((org.ascape.model.space.Discrete) getSimpleResources()
					.getHomes().getSpace()).findRandomNeighbor(this);
			if (learnerHome != null) {
				moveToward(((org.ascape.model.CellOccupant) learnerHome)
						.getHostCell());
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Resource Engagement Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void resourceEngagement() {
		if (getEngagement() != EngagementEnum.foundResource) {
			Conditional encounteredResourceCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object encounteredResourceCell) {
					if (encounteredResourceCell instanceof LearningResource) {
						return true;
					} else {
						return false;
					}
				}
			};
			final LearningResource encounteredResource = (LearningResource) ((org.ascape.model.space.Discrete) getSimpleResources()
					.getDistrict().getSpace()).findRandomNeighbor(this,
					encounteredResourceCondition);
			if (encounteredResource != null) {
				double learningInterestAddEfficacy = getLearningInterest()
						+ encounteredResource.getEfficacy();
				Conditional allLearnerInteractionsCondition = new Conditional() {
					private static final long serialVersionUID = 1L;
					public boolean meetsCondition(
							Object allLearnerInteractionsCell) {
						if (allLearnerInteractionsCell instanceof ResourceInteraction) {
							ResourceInteraction allLearnerInteractions = (ResourceInteraction) allLearnerInteractionsCell;
							return (encounteredResource.getResourceID() == allLearnerInteractions
									.getResourceID() && getLearnerID() == allLearnerInteractions
									.getLearnerID());
						} else {
							return false;
						}
					}
				};
				final ResourceInteraction allLearnerInteractions = (ResourceInteraction) getSimpleResources()
						.getResourceInteractionScape().findRandom(
								allLearnerInteractionsCondition);
				if (allLearnerInteractions != null) {
					if ((encounteredResource.getResourceID() == allLearnerInteractions
							.getResourceID() && getLearnerID() == allLearnerInteractions
							.getLearnerID())) {
						double newStrength = allLearnerInteractions
								.getStrength() + 1;
						int incrementResourceEngagements = getResourceEngagements() + 1;
						allLearnerInteractions.setStrength(newStrength);
						setResourceEngagements(incrementResourceEngagements);
						setEngagement(EngagementEnum.foundResource);
					}
				} else {

					ResourceInteraction createAgents = (ResourceInteraction) getSimpleResources()
							.getResourceInteractionScape().getSpace()
							.newLocation(false);
					createAgents.setLearnerID(getLearnerID());
					int resourceIDAddZero = encounteredResource.getResourceID() + 0;
					createAgents.setResourceID(resourceIDAddZero);
				}
				double minimum_LearningInterestAddEfficacyUnit_ = java.lang.Math
						.min(learningInterestAddEfficacy, 1);
				setLearningInterest(minimum_LearningInterestAddEfficacyUnit_);
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Learner Index.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLearnerIndex() {
		return getLearnerID();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Start Day Rule. Executed every period.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void startDay() {
		if (getSimpleResources().getTimeSegment() == 0) {
			setEngagement(EngagementEnum.notInterested);
			setTargetResourceID(0);
			Conditional targetResourceCondition = new Conditional() {
				private static final long serialVersionUID = 1L;
				public boolean meetsCondition(Object targetResourceCell) {
					if (targetResourceCell instanceof ResourceInteraction) {
						ResourceInteraction targetResource = (ResourceInteraction) targetResourceCell;
						return (getLearnerID() == targetResource.getLearnerID());
					} else {
						return false;
					}
				}
			};
			final ResourceInteraction targetResource = (ResourceInteraction) getSimpleResources()
					.getResourceInteractionScape().findRandom(
							targetResourceCondition);
			if (targetResource != null) {
				if (getLearnerID() == targetResource.getLearnerID()) {
					double strengthMultiplySubsequentEngagementFactor = targetResource
							.getStrength()
							* targetResource.getSimpleResources()
									.getSubsequentEngagementFactor();
					double randomUnit = getRandom().nextDouble();
					if (randomUnit < strengthMultiplySubsequentEngagementFactor) {
						setEngagement(EngagementEnum.seekingResource);
						int resourceIDAddZeroCopy = targetResource
								.getResourceID() + 0;
						setTargetResourceID(resourceIDAddZeroCopy);
					}
				}
			}
		}
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learning Interest property for Learner.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLearningInterest() {
		return learningInterest;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learning Interest property for Learner.
	 * 
	 * @param _learningInterest the new Learning Interest value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearningInterest(double _learningInterest) {
		learningInterest = _learningInterest;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner ID property for Learner.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerID() {
		return learnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner ID property for Learner.
	 * 
	 * @param _learnerID the new Learner ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerID(int _learnerID) {
		learnerID = _learnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Engagements property for Learner.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getResourceEngagements() {
		return resourceEngagements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Engagements property for Learner.
	 * 
	 * @param _resourceEngagements the new Resource Engagements value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceEngagements(int _resourceEngagements) {
		resourceEngagements = _resourceEngagements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Engagement property for Learner.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EngagementEnum getEngagement() {
		return engagement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Engagement property for Learner.
	 * 
	 * @param _engagement the new Engagement value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEngagement(EngagementEnum _engagement) {
		engagement = _engagement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Target Resource ID property for Learner.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTargetResourceID() {
		return targetResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Target Resource ID property for Learner.
	 * 
	 * @param _targetResourceID the new Target Resource ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTargetResourceID(int _targetResourceID) {
		targetResourceID = _targetResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "Learner " + getUID();
		} else {
			return name;
		}
	}
}
