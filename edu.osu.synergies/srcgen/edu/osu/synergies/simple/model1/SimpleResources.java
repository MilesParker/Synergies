package edu.osu.synergies.simple.model1;

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

import org.eclipse.core.runtime.IAdapterFactory;
import org.eclipse.amp.agf.IGraphicsAdapted;
import org.eclipse.amp.agf.IGraphicsAdapter;

import org.eclipse.swt.graphics.Color;
import org.eclipse.jface.viewers.IColorProvider;

import org.ascape.model.Agent;
import org.ascape.model.Cell;
import org.ascape.model.CellOccupant;
import org.ascape.model.HostCell;
import org.ascape.model.LocatedAgent;
import org.ascape.model.Scape;
import org.ascape.model.event.ScapeEvent;
import org.ascape.model.rule.Rule;
import org.ascape.model.rule.ExecuteThenUpdate;
import org.ascape.model.space.CollectionSpace;
import org.ascape.model.space.Coordinate;
import org.ascape.model.space.Coordinate2DDiscrete;
import org.ascape.model.space.Graph;
import org.ascape.model.space.Location;
import org.ascape.model.space.Singleton;
import org.ascape.runtime.NonGraphicRunner;
import org.ascape.util.Conditional;
import org.ascape.util.data.DataPoint;
import org.ascape.util.data.DataPointConcrete;
import org.ascape.util.vis.ColorFeature;
import org.ascape.util.vis.ColorFeatureConcrete;
import org.ascape.view.vis.ChartView;
import org.ascape.view.vis.GEFView;
import org.ascape.view.vis.GraphView;

import org.eclipse.amp.escape.runtime.extension.IAgentChild;
import org.eclipse.amp.escape.runtime.extension.IAgentChildProvider;

/**
 * <!-- begin-user-doc -->
 * SimpleResources Java Implementation.
 * 
 * Generated by AMF for model: SpatialResources.metaabm in project: edu.osu.synergies 
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleResources extends Scape
		implements
			IGraphicsAdapted,
			IAgentChildProvider {

	/**
	 * <!-- begin-user-doc -->
	 * The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learnerCount = 100;
	/**
	 * <!-- begin-user-doc -->
	 * The number of learning resources to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int learningResourceCount = 10;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMinimum = 0.05;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double initialInterestMaximum = 0.35;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double resourceEfficacyMinimum = 0.02;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double resourceEfficacyMaximum = 0.09;
	/**
	 * <!-- begin-user-doc -->
	 * The number of resource interactions to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int resourceInteractionCount = 0;
	/**
	 * <!-- begin-user-doc -->
	 * The number of homes to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int homeCount = 50;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int timeSegment = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int timeSegmentsinDay = 96;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int timeSegmentsWandering = 24;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean wandering = false;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double engagementReinforcement = 0.1;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextLearnerID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int nextResourceID = 0;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private double subsequentEngagementFactor = .05;
	/**
	 * <!-- begin-user-doc -->
	 * The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int districtWidth = 60;
	/**
	 * <!-- begin-user-doc -->
	 * The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private int districtHeight = 130;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape district = null;
	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Scape homes = null;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private List<IAgentChild> children;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IAgentChild> getChildren() {
		return children;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Constructs a new SimpleResources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SimpleResources() {

		children = new ArrayList<IAgentChild>();

		children = new ArrayList<IAgentChild>();

	}

	//todo, make this a useful value for evaluating compatibility of different versions of generated classes

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final long serialVersionUID = 89989998L;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static long nextUniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private long uniqueID;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public long getUID() {
		if (uniqueID == 0) {
			uniqueID = nextUniqueID++;
		}
		return uniqueID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Clones the agent, ensuring that a unique id is assigned.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object clone() {
		try {
			SimpleResources clone = (SimpleResources) super.clone();
			clone.uniqueID = 0;
			return clone;
		} catch (Exception e) {
			throw new RuntimeException("Unexpected cloning exception: " + e);
		}
	}

	org.ascape.model.Scape learnerScape;
	org.ascape.model.Scape learningResourceScape;
	org.ascape.model.Scape resourceInteractionScape;
	org.ascape.model.Scape homeScape;

	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Learner that will be used to populate the learnerScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Learner createLearnerPrototype() {
		Learner learner = new Learner();
		learner.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return learner;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Learning Resource that will be used to populate the learningResourceScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LearningResource createLearningResourcePrototype() {
		LearningResource learningResource = new LearningResource();
		learningResource.setCoordinate(new Coordinate2DDiscrete(0, 0));
		return learningResource;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Resource Interaction that will be used to populate the resourceInteractionScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInteraction createResourceInteractionPrototype() {
		ResourceInteraction resourceInteraction = new ResourceInteraction();
		return resourceInteraction;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Create an instance of Home that will be used to populate the homeScape.
	 * Overide to customize the prototype, for example to change the views created for a member scape.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Home createHomePrototype() {
		Home home = new Home();
		return home;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	static int next_vm_id;

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	int vm_unique_id;

	/**
	 * <!-- begin-user-doc -->
	 * Creates the members of SimpleResources.
	 * <!-- end-user-doc --> 
	 * @generated
	 */
	public void createScape() {
		super.createScape();

		setName("SimpleResources");
		//A manager scape provides rule execution and stat collection for itself.
		if (isRoot()) {
			Scape simpleResourcesManager = new Scape(new Singleton());
			add(simpleResourcesManager);
			simpleResourcesManager.addInitialRule(new Rule("Initialize") {
				private static final long serialVersionUID = 6846144446402098981L;
				public void execute(Agent a) {
					((SimpleResources) a.getScape()).intializeNonFramework();
				}
			});
		}
		Learner learnerProto = createLearnerPrototype();
		learnerScape = new Scape();
		learnerScape.setName("Learners");
		learnerScape.setPrototypeAgent(learnerProto);
		learnerScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(learnerProto);

		LearningResource learningResourceProto = createLearningResourcePrototype();
		learningResourceScape = new Scape();
		learningResourceScape.setName("Learning Resources");
		learningResourceScape.setPrototypeAgent(learningResourceProto);
		learningResourceScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(learningResourceProto);

		ResourceInteraction resourceInteractionProto = createResourceInteractionPrototype();
		resourceInteractionScape = new Scape();
		resourceInteractionScape.setName("Resource Interactions");
		resourceInteractionScape.setPrototypeAgent(resourceInteractionProto);
		resourceInteractionScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(resourceInteractionProto);

		Home homeProto = createHomePrototype();
		homeScape = new Scape();
		homeScape.setName("Homes");
		homeScape.setPrototypeAgent(homeProto);
		homeScape.setExecutionOrder(Scape.RULE_ORDER);

		createExtensions(homeProto);

		learnerScape.setSize(getLearnerCount());
		learningResourceScape.setSize(getLearningResourceCount());
		homeScape.setSize(getHomeCount());
		resourceInteractionScape.setSize(getResourceInteractionCount());
		district = new Scape(new org.ascape.model.space.Array2DEuclidian());
		district.setExecutionOrder(Scape.RULE_ORDER);
		HostCell protoHostCell = new HostCell();
		district.setPrototypeAgent(protoHostCell);
		district.setExtent(new org.ascape.model.space.Coordinate2DDiscrete(
				getDistrictWidth(), getDistrictHeight()));

		district.setName("Districts");
		((CollectionSpace) district.getSpace()).setPeriodic(false);
		add(district);
		homes = new Scape(new org.ascape.model.space.Graph());
		homes.setName("Homess");
		add(homes);

		add(learnerScape);

		createExtensions(learnerProto);

		add(learningResourceScape);

		createExtensions(learningResourceProto);

		add(resourceInteractionScape);

		createExtensions(resourceInteractionProto);

		add(homeScape);

		createExtensions(homeProto);

		learningResourceProto.setHostScape(district);
		learnerProto.setHostScape(district);
		district.getRules().clear();

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						learnerScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});
		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Learning Interest") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getLearningInterest();
					}
				});

		learnerScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCSAMM(
						"Learner Resource Engagements") {
					private static final long serialVersionUID = 1L;
					public final double getValue(Object learner) {
						return ((Learner) learner).getResourceEngagements();
					}
				});

		createExtensions(learnerProto);

		learningResourceScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						learningResourceScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		createExtensions(learningResourceProto);

		resourceInteractionScape
				.addStatCollector(new org.ascape.util.data.StatCollectorCond(
						resourceInteractionScape.getName() + " Population") {
					private static final long serialVersionUID = 1L;
					@SuppressWarnings("unused")
					public final boolean meetsCondition(Object object) {
						return true;
					}
				});

		createExtensions(resourceInteractionProto);

		homeScape.addStatCollector(new org.ascape.util.data.StatCollectorCond(
				homeScape.getName() + " Population") {
			private static final long serialVersionUID = 1L;
			@SuppressWarnings("unused")
			public final boolean meetsCondition(Object object) {
				return true;
			}
		});

		createExtensions(homeProto);

		learnerScape.addInitialRule(new Rule("Initialize Location") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a)
						.initializeLocation();
			}
		});

		learnerScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a).initializeState();
			}
		});
		learnerScape.addRule(new Rule("Find Home") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a).findHome();
			}
		});
		learnerScape.addRule(new Rule("Movement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a).movement();
			}
		});
		learnerScape.addRule(new Rule("Resource Engagement") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a)
						.resourceEngagement();
			}
		});
		learnerScape.addRule(new Rule("Start Day") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Learner) a).startDay();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.LearningResource) a)
						.intializeNonFramework();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize State") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.LearningResource) a)
						.initializeState();
			}
		});

		learningResourceScape.addInitialRule(new Rule("Initialize ID") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.LearningResource) a)
						.initializeID();
			}
		});

		homeScape.addInitialRule(new Rule("Initialize") {
			private static final long serialVersionUID = 1L;

			/**
			 * <!-- begin-user-doc -->
			 * 
			 * <!-- end-user-doc -->
			 * @generated
			 */
			public void execute(Agent a) {
				((edu.osu.synergies.simple.model1.Home) a)
						.intializeNonFramework();
			}
		});
		createExtensions(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * Creates UI views for SimpleResources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createGraphicViews() {
		super.createGraphicViews();
		createChartViews();
		create2DViews();

		createGraphViews();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void scapeSetup(ScapeEvent scapeEvent) {
		//Set the size of the scape populations, e.g. for mutable scapes that need to have their size reset

		learnerScape.setSize(getLearnerCount());
		learningResourceScape.setSize(getLearningResourceCount());
		homeScape.setSize(getHomeCount());
		resourceInteractionScape.setSize(getResourceInteractionCount());
	}

	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Learners.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getLearnerScape() {
		return learnerScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Learning Resources.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getLearningResourceScape() {
		return learningResourceScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Resource Interactions.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getResourceInteractionScape() {
		return resourceInteractionScape;
	}
	/**
	 * <!-- begin-user-doc -->
	 * Returns the Scape containing Homes.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org.ascape.model.Scape getHomeScape() {
		return homeScape;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createChartViews() {
		ChartView chart = new ChartView();

		final SimpleResources learnerScape = new SimpleResources();
		learnerScape.setRunner(new NonGraphicRunner());
		Learner learner = new Learner() {
			public void requestUpdate() {
			}
			public SimpleResources getSimpleResources() {
				return learnerScape;
			}
		};
		learnerScape.add(learner);
		HostCell learnerHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		learnerHost.setOccupant((CellOccupant) learner);

		IColorProvider learnerStyle2DColorProvider = new LearnerStyle2DColorProvider();

		final SimpleResources learningResourceScape = new SimpleResources();
		learningResourceScape.setRunner(new NonGraphicRunner());
		LearningResource learningResource = new LearningResource() {
			public void requestUpdate() {
			}
			public SimpleResources getSimpleResources() {
				return learningResourceScape;
			}
		};
		learningResourceScape.add(learningResource);
		HostCell learningResourceHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		learningResourceHost.setOccupant((CellOccupant) learningResource);

		IColorProvider learningResourceStyle2DColorProvider = new LearningResourceStyle2DColorProvider();

		final SimpleResources resourceInteractionScape = new SimpleResources();
		resourceInteractionScape.setRunner(new NonGraphicRunner());
		ResourceInteraction resourceInteraction = new ResourceInteraction() {
			public void requestUpdate() {
			}
			public SimpleResources getSimpleResources() {
				return resourceInteractionScape;
			}
		};
		resourceInteractionScape.add(resourceInteraction);
		HostCell resourceInteractionHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		resourceInteractionHost.setOccupant((CellOccupant) resourceInteraction);

		IColorProvider resourceInteractionStyle2DColorProvider = new ResourceInteractionStyle2DColorProvider();

		final SimpleResources homeScape = new SimpleResources();
		homeScape.setRunner(new NonGraphicRunner());
		Home home = new Home() {
			public void requestUpdate() {
			}
			public SimpleResources getSimpleResources() {
				return homeScape;
			}
		};
		homeScape.add(home);
		HostCell homeHost = new HostCell() {
			public void requestUpdate() {
			}
		};
		homeHost.setOccupant((CellOccupant) home);

		IColorProvider homeStyle2DColorProvider = new HomeStyle2DColorProvider();
		addView(chart);
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void create2DViews() {
		addView(new GEFView());
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createGraphViews() {
		homes.addView(new GraphView());
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IGraphicsAdapter getGraphicsAdapter() {
		return SimpleResourcesGraphicsAdapter.getDefault();
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private Color getInferredChartColor(Object agent,
			IColorProvider colorProvider) {
		Color color = colorProvider.getForeground(agent);
		if (color == ColorFeature.BLACK) {
			color = ColorFeatureConcrete.createHSB(
					(float) java.lang.Math.random() * 360f, 1.0f, 0.8f);
		}
		return color;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static void main(String[] args) {
		(new NonGraphicRunner())
				.openInstance("edu.osu.synergies.simple.model1.SimpleResources");
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	@Override
	public void executeOnMembers() {
		int timeStep = getRunner().getPeriod();
		startSimulationAgentChild(timeStep);

		//A normal movable agent
		((Learner) learnerScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		//A normal movable agent
		((LearningResource) learningResourceScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		//A normal movable agent
		((ResourceInteraction) resourceInteractionScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		//A normal movable agent
		((Home) homeScape.getPrototypeAgent())
				.startSimulationAgentChild(timeStep);

		super.executeOnMembers();
		calculateTimeStep(timeStep);

		//A normal movable agent
		((Learner) learnerScape.getPrototypeAgent())
				.calculateTimeStep(timeStep);

		//A normal movable agent
		((LearningResource) learningResourceScape.getPrototypeAgent())
				.calculateTimeStep(timeStep);

		//A normal movable agent
		((ResourceInteraction) resourceInteractionScape.getPrototypeAgent())
				.calculateTimeStep(timeStep);

		//A normal movable agent
		((Home) homeScape.getPrototypeAgent()).calculateTimeStep(timeStep);

	}

	public void createExtensions(Object object) {
		if (object instanceof IAgentChildProvider) {
			for (IAgentChild tmp : ((IAgentChildProvider) object).getChildren()) {
				tmp.addDataCollectors(this);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void startSimulationAgentChild(int timeStep) {
		if (timeStep == getRoot().getRunner().getEarliestPeriod()) {
			for (IAgentChild tmp : children) {
				tmp.startSimulation(timeStep);
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */

	public void calculateTimeStep(int timeStep) {
		for (IAgentChild tmp : children) {
			tmp.calculate(timeStep);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * Derive Time Segment.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTimeSegment() {
		int now = getPeriod();
		return now % getTimeSegmentsinDay();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Derive Wandering.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isWandering() {
		return getTimeSegment() <= getTimeSegmentsWandering();
	}
	/**
	 * <!-- begin-user-doc -->
	 * Initialize Initialization. Executed once at the beginning of each model run.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void intializeNonFramework() {
		setNextLearnerID(0);
		setNextResourceID(0);
	}
	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learner Count property for SimpleResources.
	 * @return The number of learners to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearnerCount() {
		return learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learner Count property for SimpleResources.
	 * The number of learners to create.
	 * @param _learnerCount the new Learner Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearnerCount(int _learnerCount) {
		learnerCount = _learnerCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Learning Resource Count property for SimpleResources.
	 * @return The number of learning resources to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getLearningResourceCount() {
		return learningResourceCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Learning Resource Count property for SimpleResources.
	 * The number of learning resources to create.
	 * @param _learningResourceCount the new Learning Resource Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLearningResourceCount(int _learningResourceCount) {
		learningResourceCount = _learningResourceCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Minimum property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMinimum() {
		return initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Minimum property for SimpleResources.
	 * 
	 * @param _initialInterestMinimum the new Initial Interest Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMinimum(double _initialInterestMinimum) {
		initialInterestMinimum = _initialInterestMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Initial Interest Maximum property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getInitialInterestMaximum() {
		return initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Initial Interest Maximum property for SimpleResources.
	 * 
	 * @param _initialInterestMaximum the new Initial Interest Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setInitialInterestMaximum(double _initialInterestMaximum) {
		initialInterestMaximum = _initialInterestMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Efficacy Minimum property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getResourceEfficacyMinimum() {
		return resourceEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Efficacy Minimum property for SimpleResources.
	 * 
	 * @param _resourceEfficacyMinimum the new Resource Efficacy Minimum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceEfficacyMinimum(double _resourceEfficacyMinimum) {
		resourceEfficacyMinimum = _resourceEfficacyMinimum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Efficacy Maximum property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getResourceEfficacyMaximum() {
		return resourceEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Efficacy Maximum property for SimpleResources.
	 * 
	 * @param _resourceEfficacyMaximum the new Resource Efficacy Maximum value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceEfficacyMaximum(double _resourceEfficacyMaximum) {
		resourceEfficacyMaximum = _resourceEfficacyMaximum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Resource Interaction Count property for SimpleResources.
	 * @return The number of resource interactions to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getResourceInteractionCount() {
		return resourceInteractionCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Resource Interaction Count property for SimpleResources.
	 * The number of resource interactions to create.
	 * @param _resourceInteractionCount the new Resource Interaction Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setResourceInteractionCount(int _resourceInteractionCount) {
		resourceInteractionCount = _resourceInteractionCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Home Count property for SimpleResources.
	 * @return The number of homes to create.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHomeCount() {
		return homeCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Home Count property for SimpleResources.
	 * The number of homes to create.
	 * @param _homeCount the new Home Count value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHomeCount(int _homeCount) {
		homeCount = _homeCount;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Time Segments in Day property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTimeSegmentsinDay() {
		return timeSegmentsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Time Segments in Day property for SimpleResources.
	 * 
	 * @param _timeSegmentsinDay the new Time Segments in Day value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTimeSegmentsinDay(int _timeSegmentsinDay) {
		timeSegmentsinDay = _timeSegmentsinDay;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Time Segments Wandering property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getTimeSegmentsWandering() {
		return timeSegmentsWandering;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Time Segments Wandering property for SimpleResources.
	 * 
	 * @param _timeSegmentsWandering the new Time Segments Wandering value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTimeSegmentsWandering(int _timeSegmentsWandering) {
		timeSegmentsWandering = _timeSegmentsWandering;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Engagement Reinforcement property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getEngagementReinforcement() {
		return engagementReinforcement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Engagement Reinforcement property for SimpleResources.
	 * 
	 * @param _engagementReinforcement the new Engagement Reinforcement value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setEngagementReinforcement(double _engagementReinforcement) {
		engagementReinforcement = _engagementReinforcement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Learner ID property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextLearnerID() {
		return nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Learner ID property for SimpleResources.
	 * 
	 * @param _nextLearnerID the new Next Learner ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextLearnerID(int _nextLearnerID) {
		nextLearnerID = _nextLearnerID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Next Resource ID property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getNextResourceID() {
		return nextResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Next Resource ID property for SimpleResources.
	 * 
	 * @param _nextResourceID the new Next Resource ID value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNextResourceID(int _nextResourceID) {
		nextResourceID = _nextResourceID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Subsequent Engagement Factor  property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getSubsequentEngagementFactor() {
		return subsequentEngagementFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Subsequent Engagement Factor  property for SimpleResources.
	 * 
	 * @param _subsequentEngagementFactor the new Subsequent Engagement Factor  value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSubsequentEngagementFactor(double _subsequentEngagementFactor) {
		subsequentEngagementFactor = _subsequentEngagementFactor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Width property for District.
	 * @return The horizontal extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDistrictWidth() {
		return districtWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Width property for District.
	 * The horizontal extent of the space.
	 * @param _districtWidth the new Width value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrictWidth(int _districtWidth) {
		districtWidth = _districtWidth;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Height property for District.
	 * @return The vertical extent of the space.
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getDistrictHeight() {
		return districtHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Height property for District.
	 * The vertical extent of the space.
	 * @param _districtHeight the new Height value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrictHeight(int _districtHeight) {
		districtHeight = _districtHeight;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the District property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getDistrict() {
		return district;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the District property for SimpleResources.
	 * 
	 * @param _district the new District value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setDistrict(Scape _district) {
		district = _district;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Gets the Homes property for SimpleResources.
	 * @return 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Scape getHomes() {
		return homes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * Sets the Homes property for SimpleResources.
	 * 
	 * @param _homes the new Homes value
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHomes(Scape _homes) {
		homes = _homes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * 
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getName() {
		if (name == null) {
			return "SimpleResources " + getUID();
		} else {
			return name;
		}
	}
}
